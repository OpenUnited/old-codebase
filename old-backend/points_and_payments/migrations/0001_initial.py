# Generated by Django 3.1 on 2021-08-22 10:37

from django.db import migrations, models
import django.db.models.deletion
import points_and_payments.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('matching', '0012_changes_for_portfolio'),
        ('work', '0089_constraints_update'),
        ('talent', '0042_constraints_update'),
        ('commercial', '0018_organisation'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.IntegerField(default=500)),
                ('currency_of_payment', models.IntegerField(choices=[(1, 'USD'), (2, 'EUR'), (3, 'GBP')], default=points_and_payments.utils.CurrencyTypes['USD'])),
                ('price_per_point_in_cents', models.IntegerField()),
                ('subtotal_in_cents', models.PositiveBigIntegerField()),
                ('sales_tax_in_cents', models.PositiveBigIntegerField()),
                ('total_payable_in_cents', models.PositiveBigIntegerField()),
                ('payment_type', models.IntegerField(choices=[(1, 'NONE'), (2, 'ONLINE'), (3, 'OFFLINE')], default=points_and_payments.utils.PaymentTypes['ONLINE'])),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community_status', models.IntegerField(choices=[(1, 'DRONE'), (2, 'HONEY_BEE'), (3, 'TRUSTED_BEE'), (4, 'QUEEN_BEE'), (5, 'BEE_KEEPER')], default=points_and_payments.utils.CommunityStatusOptions['DRONE'])),
                ('liquid_points_balance', models.PositiveBigIntegerField(default=0)),
                ('nonliquid_points_balance', models.PositiveBigIntegerField(default=0)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.person')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liquid_points_balance', models.PositiveBigIntegerField()),
                ('nonliquid_points_balance', models.PositiveBigIntegerField()),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='commercial.organisation')),
            ],
        ),
        migrations.CreateModel(
            name='OrganisationAccountCredit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('credit_reason', models.IntegerField(choices=[(1, 'GRANT'), (2, 'SALE')], default=points_and_payments.utils.OrganisationAccountCreditReasons['GRANT'])),
                ('organisation_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationAccountDebit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('debit_reason', models.IntegerField(choices=[(1, 'TRANSFER'), (2, 'EXPIRY')], default=0)),
                ('organisation_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointPriceConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('applicable_from_date', models.DateField()),
                ('usd_point_inbound_price_in_cents', models.IntegerField()),
                ('eur_point_inbound_price_in_cents', models.IntegerField()),
                ('gbp_point_inbound_price_in_cents', models.IntegerField()),
                ('usd_point_outbound_price_in_cents', models.IntegerField()),
                ('eur_point_outbound_price_in_cents', models.IntegerField()),
                ('gbp_point_outbound_price_in_cents', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liquid_points_balance', models.PositiveBigIntegerField()),
                ('nonliquid_points_balance', models.PositiveBigIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work.product')),
            ],
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.IntegerField()),
                ('currency_of_payment', models.IntegerField(choices=[(1, 'USD'), (2, 'EUR'), (3, 'GBP')], default=points_and_payments.utils.CurrencyTypes['USD'])),
                ('price_per_point_in_cents', models.IntegerField()),
                ('subtotal_in_cents', models.PositiveBigIntegerField()),
                ('sales_tax_in_cents', models.PositiveBigIntegerField()),
                ('total_payable_in_cents', models.PositiveBigIntegerField()),
                ('payment_type', models.IntegerField(choices=[(1, 'NONE'), (2, 'ONLINE'), (3, 'OFFLINE')], default=points_and_payments.utils.PaymentTypes['ONLINE'])),
                ('payment_status', models.IntegerField(choices=[(1, 'PENDING'), (2, 'PAID'), (3, 'CANCELLED'), (4, 'REFUNDED')], default=points_and_payments.utils.PaymentStatusOptions['PENDING'])),
                ('process_status', models.IntegerField(choices=[(1, 'NEW'), (2, 'COMPLETE'), (3, 'CANCELLED')], default=points_and_payments.utils.LifecycleStatusOptions['NEW'])),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.cart')),
                ('organisation_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccount')),
                ('organisation_account_credit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccountcredit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductAccountReservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('task_claim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matching.taskclaim')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductAccountDebit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('task_claim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matching.taskclaim')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductAccountCredit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('actioned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='talent.person')),
                ('organisation_account_debit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccountdebit')),
                ('product_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.productaccount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('currency_of_payment', models.IntegerField(choices=[(1, 'USD'), (2, 'EUR'), (3, 'GBP')], default=points_and_payments.utils.CurrencyTypes['USD'])),
                ('subtotal_in_cents', models.PositiveBigIntegerField()),
                ('sales_tax_in_cents', models.PositiveBigIntegerField()),
                ('total_payable_in_cents', models.PositiveBigIntegerField()),
                ('payment_type', models.IntegerField(choices=[(1, 'PARTNER'), (2, 'BANK TRANSFER')], default=0)),
                ('status', models.IntegerField(choices=[(1, 'NEW'), (2, 'COMPLETE'), (3, 'CANCELLED')], default=points_and_payments.utils.LifecycleStatusOptions['NEW'])),
                ('contributor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.contributoraccount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutboundPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('details', models.TextField(max_length=1024)),
                ('payment_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.paymentorder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InboundPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('payment_type', models.IntegerField(choices=[(1, 'NONE'), (2, 'ONLINE'), (3, 'OFFLINE')], default=points_and_payments.utils.PaymentTypes['ONLINE'])),
                ('currency_of_payment', models.IntegerField(choices=[(1, 'USD'), (2, 'EUR'), (3, 'GBP')], default=points_and_payments.utils.CurrencyTypes['USD'])),
                ('amount_paid_in_cents', models.PositiveBigIntegerField()),
                ('transaction_detail', models.TextField(max_length=1024)),
                ('sales_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.salesorder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1024)),
                ('number_of_points', models.IntegerField(default=500)),
                ('status', models.IntegerField(choices=[(1, 'NEW'), (2, 'COMPLETE'), (3, 'CANCELLED')], default=points_and_payments.utils.LifecycleStatusOptions['NEW'])),
                ('approving_bee_keeper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approver', to='talent.person')),
                ('nominating_bee_keeper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nominator', to='talent.person')),
                ('organisation_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccount')),
                ('organisation_account_credit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccountcredit')),
            ],
        ),
        migrations.CreateModel(
            name='ContributorReward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('action', models.IntegerField(choices=[(1, 'INVITED FRIENDS'), (2, 'VERIFIED IDENTITY')], default=0)),
                ('points', models.IntegerField(default=10)),
                ('contributor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.contributoraccount')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorAccountDebit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('reason', models.IntegerField(choices=[(1, 'LIQUIDATION'), (2, 'PUNISHMENT')], default=0)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('contributor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.contributoraccount')),
                ('payment_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.paymentorder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorAccountCredit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('reason', models.IntegerField(choices=[(1, 'TASK'), (2, 'LIQUIDATION'), (3, 'REWARD')], default=0)),
                ('number_of_points', models.PositiveIntegerField()),
                ('type_of_points', models.IntegerField(choices=[(1, 'NONLIQUID'), (2, 'LIQUID')], default=points_and_payments.utils.PointTypes['NONLIQUID'])),
                ('contributor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.contributoraccount')),
                ('contributor_reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.contributorreward')),
                ('payment_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.paymentorder')),
                ('task_claim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matching.taskclaim')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='organisation_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='points_and_payments.organisationaccount'),
        ),
    ]
